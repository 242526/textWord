运营商系统基础数据维护
         运营商系统基础数据维护主要是对系统数据的创建，
		 比如商品的基础数据-规格属性、商品分类、品牌管理等。  
	前端：利用AngularJS校验数据并提交请求的响应数据，
    后端：采用springMVC接收请求和参数，同时通过dubbox调用以接口发布到
	     zookeeper接口的服务实现类，
    持久层：通过spring整合mybatis以mapper接口代理的方式完成数据的增删改查
		
商家入驻模块：
      商家在商家系统填写必要资料进行申请入驻，是提交申请之后由运营商进行审核，
      审核通过则可以在平台进行相关操作，同时运营商后台还可以对商家进行禁用、启用和删除。


用户权限模块：
权限模块在运营商后台进行维护，
      主要功能是维护用户表和角色表数据同时给运营商后台用户进行角色配置，
      一个用户可以拥有多种角色。同时使用spring security配置请求拦截规则，
      系统规定每一个功能模块都有一种特定的角色，比如如果要操作用户
      模块那么用户就需要有用户角色(ROLE_USER)。
      同时实现spring security提供的认证接口UserDetai（地贴了）
      lService的loadByUsername方法根据传入用户名查询用户表得到
      用户密码以及根据用户名查询角色表得到当前用户所有的角色信息，
      完成角色的认证.在spring security的认证管理器中配置刚刚实现的认证类同时加入Bcrypt加密配置
	 
1.AngularJs:它是由google开发的前端，由javaScripe编写的js框架
                四大特征：MVC模式，双向绑定，依赖注入，模块化设计
前后的数据交互：前端也分为service层，controller，service中方法的填写url，
                controller设置方法以及逻辑处理，方法与前端页面进行绑定
常见的指令：    ng-app：模板 ng-controller：控制层，ng-init：初始化，
                ng-model：绑定参数，ng-repeat：循环遍历，ng-click：绑定单击事件 $scope,$event等

优点：          使得web开发和测试工作变得更加容易   （mvc，指令，易于使用）
缺点：          要写大量的模板标签，比较笨重

2.Security：声明式的安全框架，（访问权限进行控制），包括用户认证和用户授权
   用户认证：改用户是否未合法的
   用户授权：用户下的角色是否有使用改资源的权限
   代码流程：前端页面：login.html用户表单登入时，
          相当于控制层：SpringSecurityFilterChain配置过滤器，SpringSecurity.XML配置拦截规则
		 （当前用户是否有ROLE_USER角色数据库验证ROLE_SELLRT），静态页面不拦截，表单的登入页面，跳转页面
		  总是默认页面，认证管理器，认证类，密码加密，密码解密
		  在Service层：配置UserDetailsServiceImpl实现UserDetailService接口重写方法
		 （构建角色列表，查询审核通过的商家用户对象）
		  Dao层;调用方法查询数据返回用户对象
3. FastDFS:
      开源的 分布式文件系统，件进行管理，功能包括：文件存储、文件同步、文件访问等
   
 为什么使用FastDFS：  充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，
                      使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。
 原理：
    上传交互过程：
	              1.client询问tracker上传的stroage，不需要附件参数
	              2.tracker返回一台可用的storage
	              3.client直接和storage通信完成文件上传 
    下载交互过程：
	             1.client询问tracker下载文件的storage，参数为文件表示（卷名+文件名）
	             2.tracker返回一台可用的storage
                             3.client直接和storage通信完成文件下载				 
                     
   代码流程：1取文件的扩展名，2创建一个FastDFS的客户端，3执行上传文件，4拼接返回的URL和ip
    
   
4.项目：商品详情页:
        商品详情页访问量非常大的，如果采用angularJS取动态加载，给系统带来的压力比较大，
	    为了提高系统的性能和用户的体验，这里需要对商品详情页左静态化处理，
	
	 1.只要运营商审核某个商品通过之后就通过activeMQ发送当前审核商品的id给静态化服务器，
	 2.静态化服务器拿到商品ID之后通过Freemarker技术加载商品页面模板，
	 3.同时将商品ID对应的商品信息和sku列表信息查询出来渲染到模板中，
	 4.然后以商品ID作为生成的html文件名保存到Nginx映射的目录，
	 5.在Nginx中同时也放入静态资源。这样就可以通过Nginx静态服务器来访问商品详情页。
	 原理：静态模板+数据+freemaker=生成的静态页面
	 代码流程：
         1. 创建一个Configuration对象 
         2. 设置模板文件所在路径 
         3. 设置模板文件所使用的字符集 
         4. 根据路径加载模板文件，创建模板对象 
         5. 创建数据集对象，并向对象填充数据 
         6. 创建输出流对象Writer（歪的）（此步骤是设置输出的文件所在的路径及其名字） 
         7. 调用模板对象的process方法输出（生成）HTML文件或其他文件 
         8. 关闭流对象
5.搜索模块：
                  商品搜索采用spring data  solr查询solr全文搜索服务器，前端使用angularjs提交关键字
                  查询，利用Spring  data  solr 的API根据关键词分页查询，并且根据关键字查询（分类，品牌，
                  规格等 ）筛选条件一并返回给页面，在页面点击分类，品牌，规格价格，会再次根据关键词查询
                  和点击的条件 。   
  消息中间件：由运营商后台审核商品通过则通过activeMQ将商品id发送给索引同步服务，索引同步服务
                     拿到商品id查询改商品id的sku列表信息并同步到solr服务器，同时如果商品删除，下架也会将
                     索引库的同步删除
             





